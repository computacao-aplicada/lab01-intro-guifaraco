# -*- coding: utf-8 -*-
"""C√≥pia de Aula01_Introducao.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x8vw5Swntu0tUC2dks4FUQpfZMxVvig5

# Aula 01: Introdu√ß√£o √† Vis√£o Computacional e Computa√ß√£o Gr√°fica

### üéØ Objetivos da Aula
- Compreender o que √© Vis√£o Computacional.
- Diferenciar Vis√£o Computacional, Processamento de Imagens e Computa√ß√£o Gr√°fica.
- Realizar manipula√ß√µes simples com imagens.
- Explorar conceitos de pixels, resolu√ß√µes e canais de cor.

## O que √© Vis√£o Computacional?

A **Vis√£o Computacional** √© uma √°rea da Intelig√™ncia Artificial que busca permitir que os computadores 'vejam' e interpretem o mundo visual, assim como os humanos.

Ela utiliza imagens e v√≠deos como entrada e tenta extrair informa√ß√µes √∫teis, como:
- Detec√ß√£o de objetos
- Reconhecimento facial
- Segmenta√ß√£o de imagem
- Rastreamento de movimento

A **Computa√ß√£o Gr√°fica**, por outro lado, est√° mais voltada √† gera√ß√£o de imagens ‚Äî como renderizar cenas em 3D.

J√° o **Processamento de Imagens** se concentra na transforma√ß√£o e an√°lise de imagens (normalmente 2D) para melhorar a qualidade ou extrair caracter√≠sticas.

| √Årea                  | Foco                             |
|-----------------------|----------------------------------|
| Vis√£o Computacional   | Entendimento e interpreta√ß√£o     |
| Computa√ß√£o Gr√°fica    | Gera√ß√£o de imagens               |
| Processamento de Imagens | Manipula√ß√£o e melhoria de imagens |
"""

# Commented out IPython magic to ensure Python compatibility.
# Importa√ß√£o das bibliotecas necess√°rias
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt

# Exibir gr√°ficos inline
# %matplotlib inline

"""## Exemplo pr√°tico: Carregar e visualizar uma imagem"""

# Carregar imagem de exemplo
from PIL import Image
import requests

url = "https://images.unsplash.com/photo-1745810187217-4d9e1ccfd9d5?ixlib=rb-4.1.0&q=85&fm=jpg&crop=entropy&cs=srgb&w=640"
image = Image.open(requests.get(url, stream=True).raw)
image = image.convert("RGB")  # Garante 3 canais

# Mostrar imagem
plt.imshow(image)
plt.title("Imagem Original")
plt.axis('off')
plt.show()

"""## Manipula√ß√£o dos canais RGB"""

# Separar os canais
r, g, b = image.split()

# Exibir os canais
fig, axs = plt.subplots(1, 3, figsize=(15, 5))
for ax, channel, color in zip(axs, [r, g, b], ['R', 'G', 'B']):
    ax.imshow(channel, cmap='gray')
    ax.set_title(f'Canal {color}')
    ax.axis('off')
plt.tight_layout()
plt.show()

"""## Convers√£o para escala de cinza"""

# Converter para escala de cinza
gray_image = image.convert("L")

# Mostrar imagem em tons de cinza
plt.imshow(gray_image, cmap='gray')
plt.title("Imagem em Escala de Cinza")
plt.axis('off')
plt.show()

"""## Explorando os pixels"""

# Converter para numpy e mostrar valor de alguns pixels
np_image = np.array(image)
print("Formato da imagem:", np_image.shape)
print("Valor do pixel (0, 0):", np_image[0, 0])

"""## üß† Exerc√≠cio

Tente modificar o c√≥digo acima para:

- Exibir apenas o canal vermelho da imagem.
- Modifique aleatoriamente o canal vermelho e gere a imagem novamente.
- Criar uma imagem negativa (inverter as cores).
- Salvar uma nova imagem modificada no disco.
- Recorte um peda√ßo da imagem e salve em disco.

---
Cada um dos pontos do exerc√≠cio deve ser uma c√©lula separada!

"""

plt.imshow(r, cmap="Reds")
plt.title("Imagem Original")
plt.axis('off')
plt.show()

red_channel = np.array(r)

for i in range(red_channel.shape[0]):
    for j in range(red_channel.shape[1]):
        red_channel[i, j] = np.random.randint(0, 256)
new_red_channel = Image.fromarray(red_channel)
new_image = Image.merge("RGB", (new_red_channel, g, b))
plt.imshow(new_image)
plt.title("Imagem Modificada")
plt.axis('off')
plt.show()

inverted_image = Image.fromarray(255 - np.array(image))
plt.imshow(inverted_image)
plt.title("Imagem Invertida")
plt.axis('off')
plt.show()

inverted_image.save("modified_image.png")

cropped_image = inverted_image.crop((100, 100, 400, 400))
cropped_image.save("cropped_image.png")